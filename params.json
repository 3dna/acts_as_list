{"name":"acts_as_list","tagline":"A Rails plugin that provides list abilities to an ActiveRecord model","body":"# ActsAsList\r\n\r\n## Description\r\n\r\nThis `acts_as` extension provides the capabilities for sorting and reordering a number of objects in a list. The class that has this specified needs to have a `position` column defined as an integer on the mapped database table.\r\n\r\n## Installation\r\n\r\nIn your Gemfile:\r\n\r\n    gem 'acts_as_list'\r\n\r\nOr, from the command line:\r\n\r\n    gem install acts_as_list\r\n\r\n## Example\r\n\r\nAt first, you need to add a `position` column to desired table:\r\n\r\n    rails g migration AddPositionToTodoItem position:integer\r\n    rake db:migrate\r\n    \r\nAfter that you can use `acts_as_list` method in the model: \r\n\r\n```ruby\r\nclass TodoList < ActiveRecord::Base\r\n  has_many :todo_items, -> { order(\"position ASC\") }\r\nend\r\n    \r\nclass TodoItem < ActiveRecord::Base\r\n  belongs_to :todo_list\r\n  acts_as_list scope: :todo_list\r\nend\r\n    \r\ntodo_list.first.move_to_bottom\r\ntodo_list.last.move_higher\r\n```\r\n\r\n## Instance Methods Added To ActiveRecord Models\r\n\r\nYou'll have a number of methods added to each instance of the ActiveRecord model that to which `acts_as_list` is added. \r\n\r\nIn `acts_as_list`, \"higher\" means further up the list (a lower `position`), and \"lower\" means further down the list (a higher `position`). That can be confusing, so it might make sense to add tests that validate that you're using the right method given your context.\r\n\r\n### Methods That Change Position and Reorder List\r\n\r\n- `list_item.insert_at(2)`\r\n- `list_item.move_lower` will do nothing if the item is the lowest item\r\n- `list_item.move_higher` will do nothing if the item is the highest item\r\n- `list_item.move_to_bottom`\r\n- `list_item.move_to_top`\r\n- `list_item.remove_from_list`\r\n\r\n### Methods That Change Position Without Reordering List\r\n\r\n- `list_item.increment_position`\r\n- `list_item.decrement_position`\r\n- `list_item.set_list_position(3)`\r\n\r\n### Methods That Return Attributes of the Item's List Position\r\n- `list_item.first?`\r\n- `list_item.last?`\r\n- `list_item.in_list?`\r\n- `list_item.not_in_list?`\r\n- `list_item.default_position?`\r\n- `list_item.higher_item`\r\n- `list_item.higher_items` will return all the items above `list_item` in the list (ordered by the position, ascending)\r\n- `list_item.lower_item`\r\n- `list_item.lower_items` will return all the items below `list_item` in the list (ordered by the position, ascending)\r\n\r\n## Notes\r\nIf the `position` column has a default value, then there is a slight change in behavior, i.e if you have 4 items in the list, and you insert 1, with a default position 0, it would be pushed to the bottom of the list. Please look at the tests for this and some recent pull requests for discussions related to this.\r\n\r\nAll `position` queries (select, update, etc.) inside gem methods are executed without the default scope (i.e. `Model.unscoped`), this will prevent nasty issues when the default scope is different from `acts_as_list` scope.\r\n\r\nThe `position` column is set after validations are called, so you should not put a `presence` validation on the `position` column.\r\n\r\n\r\nIf you need a scope by a non-association field you should pass an array, containing field name, to a scope:\r\n```ruby\r\nclass TodoItem < ActiveRecord::Base\r\n  # `kind` is a plain text field (e.g. 'work', 'shopping', 'meeting'), not an association\r\n  acts_as_list scope: [:kind]\r\nend\r\n```\r\n\r\n## Versions\r\nAll versions `0.1.5` onwards require Rails 3.0.x and higher.\r\n\r\n## Build Status\r\n[![Build Status](https://secure.travis-ci.org/swanandp/acts_as_list.png)](https://secure.travis-ci.org/swanandp/acts_as_list)\r\n\r\n## Roadmap\r\n\r\n1. Sort based feature\r\n2. Rails 4 compatibility and bye bye Rails 2! Older versions would of course continue to work with Rails 2, but there won't be any support on those.\r\n\r\n## Contributing to `acts_as_list`\r\n \r\n- Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet\r\n- Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it\r\n- Fork the project\r\n- Start a feature/bugfix branch\r\n- Commit and push until you are happy with your contribution\r\n- Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.\r\n- Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.\r\n- I would recommend using Rails 3.1.x and higher for testing the build before a pull request. The current test harness does not quite work with 3.0.x. The plugin itself works, but the issue lies with testing infrastructure.\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2007 David Heinemeier Hansson, released under the MIT license\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}